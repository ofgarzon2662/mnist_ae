# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_mnist_intro.ipynb.

# %% auto 0
__all__ = ['MyNet']

# %% ../nbs/01_mnist_intro.ipynb 2
# ----------- IMPORT STATEMENTS ---------------
import argparse
import torch
import torch.nn.functional as F
from torchvision import datasets, transforms
import os
import sys
import numpy as np
import time

#---------------------------------------------
print('import done')

# %% ../nbs/01_mnist_intro.ipynb 4
# -------------------------------------------------------------
#   Define network class object and its 
#             initialization and forward function
#             (other functions are inherited from torch.nn)
# -------------------------------------------------------------
class MyNet(torch.nn.Module):
    def __init__(self):
        super(MyNet, self).__init__()
        #Conv:  input size 1 channel, output is number of filters, the 
        #  actual batch of input is implicit
        # see:   https://docs.pytorch.org/docs/stable/generated/torch.nn.Conv2d.html
        self.conv1   = torch.nn.Conv2d(in_channels=1,out_channels=numfilt,kernel_size=kernel_size2use,stride=1) 
        self.linear1 = torch.nn.Linear(numfilt*reduced_size*reduced_size,16) #after max pooling it wil lbe 12 x12
        self.linear2 = torch.nn.Linear(16, 10)

    def forward(self, x):
        x = self.conv1(x)
        x = F.relu(x)
        #Uncomment this to see what the size actually is after max pooling
        #print('MYINFO  fwd, after conv1relu, x shape:',x.shape)

        x = F.max_pool2d(x, 3, 2)
        # <<<<<<<<<<<<<<<<<--------------------
        #Uncomment this to see what the size actually is after max pooling
        #print('MYINFO  fwd, after max, x shape:',x.shape)

        x = torch.flatten(x, 1)
        x = self.linear1(x)
        x = F.relu(x)
        x = self.linear2(x)
        #not sure i need this   x = F.relu(x)
        output = F.log_softmax(x, dim=1)  #log softmax for classfcnt or binary?
        return output
print('Net class defined ')
